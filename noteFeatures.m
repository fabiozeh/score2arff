function [features, arff_info] = noteFeatures (nmat)

addpath(genpath('miditoolbox'));

features = nmat(:,1:19);

features(:,20:22) = circshift(features(:,[2 4 7]),1); % previous duration_beats, pitch and duration_s
features(1,20:22) = NaN; % no previous value for first note

features(:,23) = features(:,4) - features(:,21); % interval from previous note

features(:,24:27) = circshift(features(:,[2 4 7 23]),-1); % next duration_beats, pitch, duration_s and interval
features(end:24:27) = NaN; % no next value for last notes

features(:,28) = rem(features(:,4),12); % pitch, disregarding octave (0 = C, 1 = C#, ...)

% key-based pitch (e.g.: 0 for tonic, 7 for fifth)
key = mod(features(:,9)*7 + 12,12);
features(:,29) = mod(features(:,28) - key + 12, 12);

% is note a chord tone from tonic chord or relative minor?
features(:,30) = ismember(features(:,29), [0 4 7 9]);

% is note a chord tone from the V chord?
features(:,31) = ismember(features(:,29), [2 7 11]);

% chord probabilities
features(:,32:38) = chordProbabilities(features(:,29),features(:,8));

% chord with max probability (0 = tonic, 1 = supertonic, 2 = mediant...)
[~,features(:,39)] = max(features(:,32:38),[],2);
features(:,39) = features(:,39) - 1;

% note interval to likely chord root
roots = [0 2 4 5 7 9 11];
features(:,40) = mod(features(:,29) - roots(features(:,39)+1)' + 12, 12);

% is note a chord tone?
features(:,41) = (ismember(features(:,39), [0 3 4]) & ismember(features(:,40), [0 4 7])) | ...
    (ismember(features(:,39), [1 2 5]) & ismember(features(:,40), [0 3 7])) | ...
    (ismember(features(:,39), 6) & ismember(features(:,40), [0 3 6]));

%Narmour (MIDI toolbox)
features(:, 42) = narmour(nmat,'rd'); %registral direction (revised, Schellenberg 1997)
features(:, 43) = narmour(nmat,'rr'); %registral return (revised, Schellenberg 1997)
features(:, 44) = narmour(nmat,'id'); %intervallic difference
features(:, 45) = narmour(nmat,'cl'); %closure
features(:, 46) = narmour(nmat,'pr'); %proximity (revised, Schellenberg 1997)
features(:, 47) = narmour(nmat,'co'); %consonance (Krumhansl, 1995)

%features that require looping
for i = 1:size(features,1)
    features(i,48) = rem(features(i,1), features(i,10)); % onset beat (within measure)
    % metric strength
    if (features(i,48) == 0)
        features(i,49) = 3;
    elseif (features(i,48) == 2)
        features(i,49) = 2;
    elseif (features(i,48) - floor(features(i,48)) == 0)
        features(i,49) = 1;
    else
        features(i,49) = 0;
    end     
end

features = features(:,[2 4 7 8 12:49]);

arff_info = {
'duration_beats', 'numeric', '%.6f'; ...
'pitch', 'numeric', '%d'; ...
'duration_s', 'numeric', '%.6f'; ...
'measure', 'numeric', '%d'; ...
'dynamics', '{n,2,3,4,5,6,7,8,9,s,0}', '%c'; ...
'beats_since_dyn', 'numeric', '%.6f'; ...
'dyn_change', '{n,c,d}', '%c'; ...
'articulation', '{l,.,<,-}', '%c'; ...
'score_vib', '{0,1}', '%d'; ...
'ornamt', '{n,g,t}', '%c'; ...
'slur', '{0,1}', '%d'; ...
'slur_start', '{0,1}', '%d'; ...
'prev_dur_beats', 'numeric', '%.6f'; ...
'prev_pitch', 'numeric', '%d'; ...
'prev_dur_s', 'numeric', '%.6f'; ...
'interval_prev', 'numeric', '%d'; ...
'next_dur_beats', 'numeric', '%.6f'; ...
'next_pitch', 'numeric', '%d'; ...
'next_dur_s', 'numeric', '%.6f'; ...
'interval_next', 'numeric', '%d'; ...
'pitch_in_oct', '{0,1,2,3,4,5,6,7,8,9,10,11}', '%d'; ...
'pitch_in_key', '{0,1,2,3,4,5,6,7,8,9,10,11}', '%d'; ...
'tonic_chord_tone', '{0,1}', '%d'; ...
'dominant_chord_tone', '{0,1}', '%d'; ...
'prob_chord_I', 'numeric', '%.6f'; ...
'prob_chord_ii', 'numeric', '%.6f'; ...
'prob_chord_iii', 'numeric', '%.6f'; ...
'prob_chord_IV', 'numeric', '%.6f'; ...
'prob_chord_V', 'numeric', '%.6f'; ...
'prob_chord_vi', 'numeric', '%.6f'; ...
'prob_chord_vii', 'numeric', '%.6f'; ...
'chord', '{0,1,2,3,4,5,6}', '%d'; ...
'pitch_in_chord', '{0,1,2,3,4,5,6,7,8,9,10,11}', '%d'; ...
'current_chord_tone', '{0,1}', '%d'; ...
'nar_rd', 'numeric', '%.1f'; ...
'nar_rr', 'numeric', '%.1f'; ...
'nar_id', 'numeric', '%.1f'; ...
'nar_cl', 'numeric', '%.1f'; ...
'nar_pr', 'numeric', '%.1f'; ...
'nar_co', 'numeric', '%.1f'; ...
'beat_in_measure', 'numeric', '%.6f';  ...
'metric_strength', '{0,1,2,3}', '%d'; ...
};

end

function probs = chordProbabilities(notes, measure)
S = size(notes,1);
probs(S,7) = 0; %preallocation
for i=1:S
    window = notes(ismember(measure, measure(i)));
    s = size(window,1);
    probs(i,1) = sum(ismember(window, [0 4 7]))/s;
    probs(i,2) = sum(ismember(window, [2 5 9]))/s;
    probs(i,3) = sum(ismember(window, [4 7 11]))/s;
    probs(i,4) = sum(ismember(window, [5 9 0]))/s;
    probs(i,5) = sum(ismember(window, [7 11 2]))/s;
    probs(i,6) = sum(ismember(window, [9 0 4]))/s;
    probs(i,7) = sum(ismember(window, [11 2 5]))/s;
end
end
